<h1 class="mar-b-xs">Dialog</h1>
<h2 class="txt-gray-5 mar-t-none">Modal content container</h2>
<h2 id="demo">Demo</h2>
<code-sample>
<template>
  <m-dialog>
    <h2>Title</h2>
    <p>Put anything you want in here! Even some lorem ipsum dolor sit amet...</p>
  </m-dialog>
</template>

<button onclick="document.querySelector('m-dialog').showModal()" ord="primary">Open Dialog</button>
</code-sample>
<h2 id="api">API</h2>
<h3 id="tag">Tag</h3>
<table layout="fixed">
  <thead>
  <tr>
    <th colspan="2">Name</th>
    <th colspan="2">Type</th>
    <th colspan="6">Content</th>
  </tr>
  </thead>
  <tbody>
  <tr>
    <td colspan="2"><code>m-dialog</code></td>
    <td colspan="2">Custom Element</td>
    <td colspan="6">Any content. The first element with <code>autofocus</code>, if any, will receive focus when the Dialog is opened.</td>
  </tr>
  </tbody>
</table>
<h3 id="attributes">Attributes</h3>
<table layout="fixed">
  <thead>
  <tr>
    <th colspan="2">Name</th>
    <th colspan="2">Value</th>
    <th colspan="6">Description</th>
  </tr>
  </thead>
  <tbody>
  <tr>
    <td colspan="2"><code>open</code></td>
    <td colspan="2">Boolean attribute</td>
    <td colspan="6">Will open the Dialog when added or close when removed. It is the same as calling <code>showModal()</code> and <code>close()</code>. If you want the dialog displayed "modelessly", you have to call the <code>show</code> method.</td>
  </tr>
  </tbody>
</table>
<h3 id="events">Events</h3>
<table layout="fixed">
  <thead>
  <tr>
    <th colspan="2">Name</th>
    <th colspan="2">Detail</th>
    <th colspan="6">Description</th>
  </tr>
  </thead>
  <tbody>
  <tr>
    <td colspan="2"><code>close</code></td>
    <td colspan="2">None</td>
    <td colspan="6">Fired after the Dialog was closed. Note that the Dialog and its content are preserved in the DOM, so forms, for example, will retain their values. Your app should reset the form if that's what your use case requires.
      <p class="mar-b-none">Beware of infinite loops when implementing a done/close/cancel button. Only call <code>close()</code> on the Dialog if the event is not this event, e.g. <code>if (e.type !== 'close') { myDialog.close() }</code>.</p></td>
  </tr>
  </tbody>
</table>
<h3 id="methods">Methods</h3>
<table layout="fixed">
  <thead>
  <tr>
    <th colspan="2">Signature</th>
    <th colspan="8">Description</th>
  </tr>
  </thead>
  <tbody>
  <tr>
    <td colspan="2"><code>close([returnValue])</code></td>
    <td colspan="8">MDN says: "Closes the dialog. An optional DOMString may be passed as an argument, updating the returnValue of the the dialog." Also note that the Dialog and its contents are still present in the DOM (e.g. forms still have user-entered values, so reset it if that's what your use case requires).</td>
  </tr>
  <tr>
    <td colspan="2"><code>show()</code></td>
    <td colspan="8">MDN says: "Displays the dialog modelessly, i.e. still allowing interaction with content outside of the dialog."</td>
  </tr>
  <tr>
    <td colspan="2"><code>showModal()</code></td>
    <td colspan="8">MDN says: "Displays the dialog as a modal, over the top of any other dialogs that might be present. Interaction outside the dialog is blocked."</td>
  </tr>
  </tbody>
</table>
<h2 id="guidelines">Guidelines</h2>
<h3 id="title">What about &lt;dialog&gt;?</h3>
<p>This element attempts to match the <code>HTMLDialogElement</code> interface as close as possible, so when browser support for <code>&lt;dialog&gt;</code> is sufficient it will be removed from M- in favor of the native element. Breaking changes should be limited to just the "m-" prefix.</p>
<h3 id="state">Forms and DOM state</h3>
<p>The state of the content is controlled by your application. Dialog does not change the state of its children other than moving them into a containing div on init. Forms and all other elements will initialize the way they are provided by the application and will continue to remain untouched even when the Dialog is closed. For example, if a Dialog is used to present a login form the application should remove the Dialog completely or reset the form after successful authentication. If left alone the Dialog and the login form inside it will contain the user's credentials. It's your content; you have to manage it.</p>
<h3 id="a11y">Accessibility</h3>
<p>The necessary ARIA attributes are added automatically; however, if your Dialog "contains an alert message" you should set <code>role="alertdialog"</code>.</p>

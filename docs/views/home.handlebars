<div id="home-logo-version" class="hidden txt-center mar-t-lg">
  <img src="/img/m-logo.png" alt="M- logo" width="100px">
  <small class="block mar-t-sm txt-md">{{ version }}</small>
</div>
<div id="home-intro" class="mar-t-xl">
  <div id="home-messages" class="flex align-items-center justify-content-center txt-center">
    <h1>A design system that fully embraces web standards.</h1>
    <h1 hidden>Because everything else is a pain.</h1>
    <h1 hidden>It's freedom, baby. Yeah!</h1>
    <h1 hidden>Does üëè not üëè suh üëè port üëè IE.</h1>
    <h1 hidden>Standards #FTW</h1>
    <h1 hidden>Depressed? Call 1-800-M-DASH</h1>
    <h1 hidden>Some say it's the HTML6 we never got.</h1>
    <h1 hidden>So modern it feels old!</h1>
    <h1 hidden>React is a scam.</h1>
    <h1 hidden>Tiny design system means a big...probability of faster pages.</h1>
    <h1 hidden>"Nothing is faster than nothing."<br><span style="white-space: nowrap">-Me</span></h1>
    <h1 hidden>My AWS bill was $42 last month!!</h1>
    <h1 hidden>You should stop reading this.</h1>
    <h1 hidden>How many messages are there?</h1>
    <h1 hidden>17, including this one.</h1>
    <h1 hidden>Does it loop though?</h1>
    <h1 hidden>No.</h1>
  </div>
  <div class="push pull mar-b-xs txt-center txt-lg">
    <div class="mar-b-xs">M- seeks to leverage HTML, not replace it or try to outsmart it.</div>
    <div>This makes M- ideal for all web projects and skill levels.</div>
  </div>
  <h5 class="benefits txt-center">
    <span>linkable</span>
    <m-vbar></m-vbar>
    <span>tiny <a href="#performance">6kb</a></span>
    <m-vbar></m-vbar>
    <span>
      <m-icon name="screen-smartphone" class="pos-relative" style="left: 3px"></m-icon>
      <m-icon name="screen-tablet" class="txt-sm"></m-icon>
      <m-icon name="screen-desktop" class="txt-lg pos-relative" style="top: 2px; left: 1px"></m-icon>
      &nbsp;&nbsp;responsive
    </span>
    <m-vbar></m-vbar>
    <span>WCAG 2.1</span>
    <m-vbar></m-vbar>
    <a href="#compatibility">very compatible</a>
    <m-vbar></m-vbar>
    <span>zero dependencies</span>
  </h5>
</div>
<div class="push pull txt-center mar-t-xl" style="max-width: 545px">
  <h3 id="quick-start" class="mar-t-none mar-b-none">Quick start</h3>
  <p class="mar-t-none mar-b-sm">It's called the web, people. Use it.</p>
  <code-sample readonly="readonly">
    <template>
      <link href="{{prodCdnUrl}}css" rel="stylesheet">
      <script src="{{prodCdnUrl}}js" defer></script>
    </template>
  </code-sample>
  <div class="txt-xs">or <a href="#installation">npm</a></div>
</div>
<hr class="mar-t-xl mar-b-xl">
<h2 id="intro" class="mar-b-none">Introduction</h2>
<m-row>
  <m-col span="6">
    <p class="fnt-italic fnt-bold">What is M-?</p>
    <p>M- (pronounced "em dash") is a UI library. It's small and robust enough to be used as your product's design system or for a basic website.</p>
    <p class="fnt-italic fnt-bold">What makes M- special?</p>
    <p>Quite literally, nothing.</p>
    <p>There are no new concepts or methodologies. Nothing proprietary, no dependencies, and no build steps. It's just a novel approach to leveraging standards that results in the
      <span class="fnt-italic">smallest</span> and <span class="fnt-italic">most compatible</span> UI system available.</p>
    <!--  <p>M- believes <code>&lt;tag attribute="value"&gt;</code> is the best API for UI development. And so, M- extensively leverages standard HTML, custom HTML tags, and Custom Elements to create a complete set of components that all share a uniform API of tags, attributes, and nesting. There are no awkward CSS methodologies or framework idioms here!</p>-->
    <p>M- works with <a href="https://custom-elements-everywhere.com/" target="_blank" rel="noopener">any framework</a> or no framework and works for all types of web projects: SSR, SPA, PWA, static site, and even popular email clients.</p>
    <p class="fnt-italic fnt-bold">Where did M- come from?</p>
    <p>This approach to standards-based design systems is the result of building several of them in large engineering organizations where - for better or worse - tech stacks and project architectures vary wildly, but need to share common UI elements.</p>
    <!--  <p>And also out of sheer desperation for simple, immediately usable solutions that make web development so productive!</p>-->
    <!--  <p>In fact, it's no different than HTML, which, ironically, does kind of make it special nowadays.</p>-->
    <!--  <p>Its size, speed, and adherence to web standards makes it unique.</p>-->
    <!--  <p>M- is also a design system. It can scale across your organization by serving as the shared source of UI/UX truth-->
    <!--    for all web-based projects. You can also fork M- and customize as you like.</p>-->
  </m-col>
  <m-col span="6" class="flex justify-content-center align-items-center">
    <span class="txt-gray-1 pos-relative" style="font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', 'Consolas', 'source-code-pro', monospace; letter-spacing: 1px; font-size: 10em; top: -43px;">&lt;m-&gt;</span>
  </m-col>
</m-row>
</div>
<h2 id="compatibility">M- is compatible with everything</h2>
<p>M- can be used anywhere HTML is used because it is HTML. That means SSR, SPA, PWA, static sites, and email templates are compatible, as well as virtually* all JavaScript frameworks past, present, and future. That's the power of leveraging web standards!</p>
<!--<p>Large organizations especially benefit because unlike other design systems, M- can be shared across all projects without restricting framework choice or changing architectures. Fork it, theme it, and help teams adopt it all without requiring any major project changes.</p>-->
<p>As a simple demonstration, here's <span class="fnt-bold">12 different technologies</span> all using the same M- component:</p>
<code-sample readonly="readonly">
<template>
  <!--   Vue   -->
  <m-alert v-if="alert" v-bind:type="alert.type">\{{ alert.message }}</m-alert>


  <!--   Angular   -->
  <m-alert *ngIf="alert" [type]="alert.type">\{{ alert.message }}</m-alert>


  <!--   Riot   -->
  <m-alert if="{alert}" type="{alert.type}">{alert.message}</m-alert>


  <!--   Preact   -->
  {props.alert &&
  <m-alert type={props.alert.type}>{props.alert.message}</m-alert>
  }


  <!--   Svelte   -->
  {#if alert}
    <m-alert bind:type="{alert.type}">{alert.message}</m-alert>
  {/if}


  <!--   Handlebars   -->
  \{{#if alert}}
  <m-alert type="\{{alert.type}}">\{{alert.message}}</m-alert>
  \{{/if}}


  <!--   Lit, Hyper, other template literals   -->
  html`
  <m-alert type="${alert.type}">${alert.message}</m-alert>
  `


  <!--   EJS, ERB   -->
  <m-alert type="<%= alert.type %>"><%= alert.message %></m-alert>


  <!--   Static HTML of course :)   -->
  <m-alert type="success">My message</m-alert>
</template>
</code-sample>
<small>*Framework compatibility with Custom Elements is being tracked on <a href="https://custom-elements-everywhere.com" target="_blank" rel="noopener">custom-elements-everywhere.com</a>. Today, all but
  <a href="https://custom-elements-everywhere.com/#react">one</a> works with this standard.</small>
<h2 id="performance">Performance</h2>
<p>M- is fast! Its <span class="fnt-bold">execution speed</span> comes from leveraging standards as much as possible in order to minimize code, retain browser optimizations, and eliminate dependencies. The latest JavaScript frameworks and virtual DOMs are still relatively expensive abstractions with execution overhead, and when it comes to code, nothing is faster than nothing!</p>
<p>In addition to execution speed, <span class="fnt-bold">pages load faster</span> because M- is so much smaller:</p>
<table layout="fixed">
  <tr>
    <td colspan="1">
      <span class="fnt-bold">M-</span>
    </td>
    <td colspan="6">
      <meter min="0" max="244" low="20" optimum="12" high="80" value="6.8"></meter>
      <small>6.8kb</small>
    </td>
  </tr>
  <tr>
    <td colspan="1">
      <span class="fnt-bold">Bootstrap</span>
    </td>
    <td colspan="6">
      <meter min="0" max="244" low="20" optimum="12" high="80" value="71.4"></meter>
      <small>71.4kb</small>
    </td>
  </tr>
  <tr>
    <td colspan="1">
      <span class="fnt-bold">Material Web</span>
    </td>
    <td colspan="6">
      <meter min="0" max="244" low="20" optimum="12" high="80" value="79.5"></meter>
      <small>79.5kb</small>
    </td>
  </tr>
  <tr>
    <td colspan="1">
      <span class="fnt-bold">Zurb Foundation</span>
    </td>
    <td colspan="6">
      <meter min="0" max="244" low="20" optimum="12" high="80" value="87.8"></meter>
      <small>87.8kb</small>
    </td>
  </tr>
  <tr>
    <td colspan="1">
      <span class="fnt-bold">React Bootstrap</span>
    </td>
    <td colspan="6">
      <meter min="0" max="244" low="20" optimum="12" high="80" value="103.1"></meter>
      <small>103.1kb</small>
    </td>
  </tr>
  <tr>
    <td colspan="1">
      <span class="fnt-bold">Material-UI</span>
    </td>
    <td colspan="6">
      <meter min="0" max="244" low="20" optimum="12" high="80" value="134.2"></meter>
      <small>134.2kb</small>
    </td>
  </tr>
  <tr>
    <td colspan="1">
      <span class="fnt-bold">Semantic UI</span>
    </td>
    <td colspan="6">
      <meter min="0" max="244" low="20" optimum="12" high="80" value="174.3"></meter>
      <small>174.3kb</small>
    </td>
  </tr>
  <tr>
    <td colspan="1">
      <span class="fnt-bold">Microsoft Fabric</span>
    </td>
    <td colspan="6">
      <meter min="0" max="244" low="20" optimum="12" high="80" value="244"></meter>
      <small>244.1kb</small>
    </td>
  </tr>
</table>
<small><span class="fnt-bold">Note:</span> Sizes are min+gzip and include stylesheets, scripts, and runtime dependencies. In other words, this is the overhead before you've written your first line of code.</small>
<h2 id="installation">Installation</h2>
<h3 id="installation-cdn">CDN</h3>
<p>Development: <code>{{devCdnUrl}}[css|js]</code></p>
<p>Production: <code>{{prodCdnUrl}}[css|js]</code></p>
<h3 id="installation-npm">npm</h3>
<code>npm install m-</code>
<p>Built assets including <a href="/custom-props">custom properties</a> are located in <code>dist/</code>.</p>
<h2 id="browsers">Browser support</h2>
<p>M- works with the latest versions of:</p>
<ul>
  <li>Chrome</li>
  <li>Chrome for Android</li>
  <li>Safari</li>
  <li>iOS Safari</li>
  <li>Firefox</li>
  <li>Edge</li>
</ul>
<p>Other modern browsers that support <a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/customElements" target="_blank" rel="noopener">Custom Elements</a> are likely to work, but are not tested (<a href="https://github.com/jfbrennan/m-/issues" target="_blank" rel="noopener">file
    a bug if you see something</a>). IE is not supported and is unlikely to work even if you polyfill.</p>
<h2 id="about">More about M-</h2>
<h3>Purpose</h3>
<p>To bring easy back.</p>
<p>The UI layer of web applications has been overcomplicated and made dependent upon non-standard frameworks and methodologies that, in the context of UI components, do not add much value. Frameworks are best applied to application-centric problems like routing, state management, and some high-level component structure. They are not ideal for UI-centric problems like layout, shared UI elements, and generic styles.</p>
<p>M- gives you a complete set of modern compatible-with-everything UI components instantly available from a CDN. No downloads. No CLI. No configuration. No build steps. No prespiling the virtual tree-shake lint matrix. It does this by <span class="fnt-italic">embracing</span> HTML (and CSS and JavaScript) and relentlessly leveraging it. The result is a fun, uniquely small, and fast design system with standards-level longevity.</p>
<p>Depending on the kind of project you're working on, you can use M- on its own or alongside your framework of choice. In the latter case, the framework is responsible for the <em>structure and state of your application</em> while HTML and M- supply the final layer of UI.</p>
<h3>The m- prefix</h3>
<p>A prefix is required for any custom HTML (<a href="https://dev.to/jfbrennan/custom-html-tags-4788" target="_blank" rel="noopener">tags or elements</a>). "M" is short for markup, because M- is all about that declarative markup!</p>
<h3>Design philosophy</h3>
<p>M- believes in and is committed to the web platform. Developing on the web is awesome because:</p>
<ul>
  <li>It's open</li>
  <li>Has low barriers to entry</li>
  <li>Easier than other platforms</li>
  <li>Available on virtually every device in the world!</li>
  <li>Has the biggest and most active user base by far!</li>
</ul>
<p>M- was designed with all that in mind. It's why
  <a href="#installation">CDN install</a> is the first option and not buried or unavailable as if linking to other resources on the internet is a last resort. It's why M- components are built with standard, approachable tech and not a popular JavaScript library. It's why there is no special syntax or proprietary ideas and why there's no dependencies. It's why the project is open source.</p>
<p>The intent of the M- API design is to be familiar. Where possible, M- matches native HTML, e.g. <code>type=""</code>, <code>name=""</code>, <code>disabled</code>, and when there isn't a native example to follow M- strives to use familiar patterns, e.g. <code>dismissible="false"</code> for Alert was chosen because it feels similar to the native <code>draggable="false"</code> attribute. If you could cover up all the <code>m-</code> prefixes in your markup, the hope is you couldn't tell the difference between native HTML elements and M-.</p>
<h3>It's for everyone!</h3>
<p>The JavaScript community has been convinced of an awful lie:</p>
<blockquote>Modern web development requires special tools, syntax, compilers, and all sorts of time-wasting pain.</blockquote>
<p>The web is an open platform accessible to everyone and so a design system for the web shouldn't require advanced knowledge just to get started, and it shouldn't require a commitment to learn a specific framework's idioms and API in order to make full use of it. M- serves true beginners equally as well as it does professional software engineers. So, whether you're building your first website or a large scale application with millions of users, M- helps you quickly build UI with
  <a href="/comparison">significantly less code</a> and standards-based code.</p>
<!--<h2>Contribution & support</h2>-->
<!--<p>If M- has helped you, please help M- with its hosting fees: <a href="">Open Collective</a></p>-->
<!--<p>If you want to contribute, <a href="https://github.com/jfbrennan/m-/issues" rel="noopener">come on over to GitHub</a> and help.</p>-->

<script>
  // Cycle through the messages at the top of the page
  const intervalId = setInterval(goToNextMessage, 4000);

  function goToNextMessage() {
    const currentMessage = document.getElementById('home-messages').querySelector('h1:not([hidden])');
    const nextMessage = currentMessage.nextElementSibling;

    // Hide current, show next
    if (nextMessage) {
      currentMessage.hidden = true;
      nextMessage.hidden = false;
    }
    else {
      clearInterval(intervalId);
    }
  }
</script>
